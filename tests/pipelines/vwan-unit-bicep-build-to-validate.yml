name: "ALZ-Bicep unit tests for vWAN Connectivity"

trigger: none

variables:
  - group: csu-bicep-environment
  - name: ResourceGroupName
    value: "rsg-github-pr-$(System.PullRequest.PullRequestNumber)"
  - name: SubscriptionName
    value: "sub-unit-test-pr-$(System.PullRequest.PullRequestNumber)"

stages:
  # This stage will test the modules using the contributor's branch only.
  - stage: PRFileDeployOnly
    variables:
      - name: SubscriptionName
        value: "sub-unit-test-pr-$(System.PullRequest.PullRequestNumber)-s1"
      - name: ManagementGroupPrefix
        value: "PR-$(System.PullRequest.PullRequestNumber)-S1"

jobs:
  - job: bicep_deploy
    displayName: Deploy Bicep Files for PR
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: Bash@3
        displayName: Login to Azure
        name: git_azlogin
        inputs:
          targetType: "inline"
          script: |
            az login --service-principal --username $(azclilogin) --password $(azclipwd) --tenant $(azclitenant)

      - task: Bash@3
        displayName: Az CLI Create Subscription
        name: create_subscription
        inputs:
          targetType: "inline"
          script: |
            az deployment mg create --name "deploy-$(SubscriptionName)" --location $(Location) --management-group-id $(azclitenant) --template-file tests/LZ-Vending/subscription/main.bicep --parameters @tests/LZ-Vending/subscription/subscription.parameters.json --parameters subscriptionBillingScope=$(ALZ-AZURE-SECRET-EA-BILLING-ACCOUNT) subscriptionDisplayName=$(SubscriptionName)
            subId=$(az deployment mg show --name "$(SubscriptionName)" --management-group-id $(azclitenant) --query properties.outputs.subscriptionId.value)
            echo $subId
            echo "##vso[task.setvariable variable=subscriptionId]$subId"
            echo "##vso[task.setvariable variable=IsDeployed;isoutput=true]$subId"

      - task: Bash@3
        displayName: Az CLI Refresh subscription list
        name: refresh_subscription
        inputs:
          targetType: "inline"
          script: |
            az account list --refresh

      - task: Bash@3
        displayName: Check for vwanNetworking Changes
        name: git_vwannetworking_diff
        inputs:
          targetType: "inline"
          script: |
            git_vwan=$(git diff --name-only HEAD^ HEAD infra-as-code/bicep/modules/vwanConnectivity/vwanConnectivity.bicep )
            echo "##vso[task.setvariable variable=gitVwanOUTPUT]$git_vwan"

      - task: Bash@3
        displayName: Check for vwanNetwork Connection Changes
        name: git_vwannetworkconnection_diff
        inputs:
          targetType: "inline"
          script: |
            git_vwannwc=$(git diff --name-only HEAD^ HEAD infra-as-code/bicep/modules/vnetPeeringVwan ':(exclude)*.md' ':(exclude)*.png')
            echo "##vso[task.setvariable variable=gitVwanNwcOUTPUT]$git_vwannwc"

      - task: Bash@3
        displayName: Az CLI Create Resource Group for PR
        name: create_rsg
        condition: and(or(ne(variables['gitVwanOUTPUT'], ''), ne(variables['gitVwanNwcOUTPUT'], ''), ne(variables['subId'], ''))
        inputs:
          targetType: "inline"
          script: |
            az account set --subscription $(subId)
            if [ $(az group exists --name $(ResourceGroupName) ) == false ]; then
                sleep 300
            fi
            az group create --name $(ResourceGroupName) --location $(Location)

      - task: Bash@3
        displayName: Az CLI Register Resource Providers for PR
        name: register_providers
        inputs:
          targetType: "inline"
          script: |
            az account set --subscription $(subId)
            az provider register -n 'Microsoft.Insights'

      - task: Bash@3
        displayName: Az CLI Deploy vWan Networking for PR
        name: create_vwan_network
        condition: and(or(ne(variables['gitVwanOUTPUT'], ''), ne(variables['gitVwanNwcOUTPUT'], '')), ne(variables['subId'], ''))
        inputs:
          targetType: "inline"
          script: |
            az deployment group create --resource-group $(ResourceGroupName) --template-file infra-as-code/bicep/modules/vwanConnectivity/vwanConnectivity.bicep --parameters @infra-as-code/bicep/modules/vwanConnectivity/parameters/vwanConnectivity.parameters.min.json parVirtualNetworkIdToLink="/subscriptions/$(subId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Network/virtualNetworks/vnet-spoke"

      - task: Bash@3
        displayName: Az CLI Deploy vWan Network connection for PR
        name: create_vwan_network_connection
        condition: and(ne(variables['gitVwanNwcOUTPUT'], ''), ne(variables['subId'], ''))
        inputs:
          targetType: "inline"
          script: |
            az deployment sub create --location $(Location) --template-file infra-as-code/bicep/modules/vnetPeeringVwan/vnetPeeringVwan.bicep --parameters @infra-as-code/bicep/modules/vnetPeeringVwan/parameters/vnetPeeringVwan.parameters.min.json parVirtualWanHubResourceId="/subscriptions/$(subId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Network/virtualHubs/alz-vhub-$(Location)" parRemoteVirtualNetworkResourceId="/subscriptions/$(subId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Network/virtualNetworks/vnet-spoke"

      # Verify that WhatIf does not find differences between code and environment thats just been deployed
      - task: Bash@3
        displayName: Az CLI After Deployment What-If vWan Networking for PR
        name: whatif_mgs
        condition: and(or(ne(variables['gitVwanOUTPUT'], ''), ne(variables['gitVwanNwcOUTPUT'], '')), ne(variables['subId'], ''))
        inputs:
          targetType: "inline"
          script: |
            result=$(az deployment tenant what-if --template-file infra-as-code/bicep/modules/vwanConnectivity/vwanConnectivity.bicep --parameters @infra-as-code/bicep/modules/vwanConnectivity/parameters/vwanConnectivity.parameters.min.json --exclude-change-types Ignore NoChange --only-show-errors)
            if [[ $result != *'Resource changes: no change.'* ]]
            then
              echo "##vso[task.logissue type=error]WhatIf reports difference between code and environment thats just been deployed"
              echo "$result"
              exit 1
            fi

  - job: bicep_cleanup
    dependsOn: bicep_deploy
    variables:
      isDeployed: $[ dependencies.bicep_deploy.outputs['create_subscription.IsDeployed'] ]
    displayName: Cleanup Bicep Deployment for PR
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: AzurePowerShell@5
        displayName: Az CLI Remove/Cleanup Deployment
        condition: ne(variables['isDeployed'], '')
        inputs:
          azureSubscription: "azserviceconnection"
          ScriptType: "FilePath"
          ScriptPath: ".github/scripts/Wipe-AlzTenant.ps1"
          ScriptArguments: '-tenantRootGroupID $(azclitenant) -intermediateRootGroupID "$(ManagementGroupPrefix)" -subscriptionName "$(SubscriptionName)"'
          azurePowerShellVersion: "LatestVersion"
          pwsh: true

  # This stage will test the modules by first deploying the resources using the ALZ-Bicep main branch and then deploying over the top of those resources using the contributor's branch.
  - stage: PROverMainFileDeploy
    dependsOn: "PRFileDeployOnly"
    variables:
      - name: SubscriptionName
        value: "sub-unit-test-pr-$(System.PullRequest.PullRequestNumber)-s2"
      - name: ManagementGroupPrefix
        value: "PR-$(System.PullRequest.PullRequestNumber)-S2"

    # This job is used to create a subscription and test the modules and scenarios within the description at the top of this file.
    jobs:
      - job: bicep_deploy_mainfiles
        displayName: Deploy Bicep Files for Main
        pool:
          vmImage: ubuntu-latest
        steps:
          - bash: git checkout main

          - task: Bash@3
            displayName: Login to Azure
            name: git_azlogin
            inputs:
              targetType: "inline"
              script: |
                az login --service-principal --username $(azclilogin) --password $(azclipwd) --tenant $(azclitenant)

          - task: Bash@3
            displayName: Az CLI Create Subscription
            name: create_subscription
            inputs:
              targetType: "inline"
              script: |
                az deployment mg create --name "deploy-$(SubscriptionName)" --location $(Location) --management-group-id $(azclitenant) --template-file tests/LZ-Vending/subscription/main.bicep --parameters @tests/LZ-Vending/subscription/subscription.parameters.json --parameters subscriptionBillingScope=$(ALZ-AZURE-SECRET-EA-BILLING-ACCOUNT) subscriptionDisplayName=$(SubscriptionName)
                subId=$(az deployment mg show --name "$(SubscriptionName)" --management-group-id $(azclitenant) --query properties.outputs.subscriptionId.value)
                echo $subId
                echo "##vso[task.setvariable variable=subscriptionId]$subid"
                echo "##vso[task.setvariable variable=subscriptionId;isoutput=true]$subId"
                echo "##vso[task.setvariable variable=IsDeployed;isoutput=true]$subId"

          - task: Bash@3
            displayName: Az CLI Refresh Subscription List
            name: refresh_subscription
            inputs:
              targetType: "inline"
              script: |
                az account list --refresh

      - task: Bash@3
        displayName: Az CLI Deploy vWan Networking for main
        name: create_vwan_network
        condition: and(or(ne(variables['gitVwanOUTPUT'], ''), ne(variables['gitVwanNwcOUTPUT'], '')), ne(variables['subId'], ''))
        inputs:
          targetType: "inline"
          script: |
            az deployment group create --resource-group $(ResourceGroupName) --template-file infra-as-code/bicep/modules/vwanConnectivity/vwanConnectivity.bicep --parameters @infra-as-code/bicep/modules/vwanConnectivity/parameters/vwanConnectivity.parameters.min.json parVirtualNetworkIdToLink="/subscriptions/$(subId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Network/virtualNetworks/vnet-spoke"

      - task: Bash@3
        displayName: Az CLI Deploy vWan Network connection for main
        name: create_vwan_network_connection
        condition: and(ne(variables['gitVwanNwcOUTPUT'], ''), ne(variables['subId'], ''))
        inputs:
          targetType: "inline"
          script: |
            az deployment sub create --location $(Location) --template-file infra-as-code/bicep/modules/vnetPeeringVwan/vnetPeeringVwan.bicep --parameters @infra-as-code/bicep/modules/vnetPeeringVwan/parameters/vnetPeeringVwan.parameters.min.json parVirtualWanHubResourceId="/subscriptions/$(subId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Network/virtualHubs/alz-vhub-$(Location)" parRemoteVirtualNetworkResourceId="/subscriptions/$(subId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Network/virtualNetworks/vnet-spoke"

      # Verify that WhatIf does not find differences between code and environment thats just been deployed
      - task: Bash@3
        displayName: Az CLI After Deployment What-If vWan Networking for PR
        name: whatif_mgs
        condition: and(or(ne(variables['gitVwanOUTPUT'], ''), ne(variables['gitVwanNwcOUTPUT'], '')), ne(variables['subId'], ''))
        inputs:
          targetType: "inline"
          script: |
            result=$(az deployment tenant what-if --template-file infra-as-code/bicep/modules/vwanConnectivity/vwanConnectivity.bicep --parameters @infra-as-code/bicep/modules/vwanConnectivity/parameters/vwanConnectivity.parameters.min.json --exclude-change-types Ignore NoChange --only-show-errors)
            if [[ $result != *'Resource changes: no change.'* ]]
            then
              echo "##vso[task.logissue type=error]WhatIf reports difference between code and environment thats just been deployed"
              echo "$result"
              exit 1
            fi

      - job: bicep_deploy_prfiles
        displayName: Deploy Bicep Files for PR
        dependsOn: bicep_deploy_mainfiles
        variables:
          subscriptionId: $[ dependencies.bicep_deploy_mainfiles.outputs['passOutput.subscriptionId'] ]
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: Bash@3
            displayName: Login to Azure
            name: git_azlogin
            inputs:
              targetType: "inline"
              script: |
                az login --service-principal --username $(azclilogin) --password $(azclipwd) --tenant $(azclitenant)

          - task: Bash@3
            displayName: Az CLI Refresh Subscription List
            name: refresh_subscription
            inputs:
              targetType: "inline"
              script: |
                az account list --refresh

      - task: Bash@3
        displayName: Az CLI Create Resource Group for PR
        name: create_rsg
        condition: and(or(ne(variables['gitVwanOUTPUT'], ''), ne(variables['gitVwanNwcOUTPUT'], ''), ne(variables['subId'], ''))
        inputs:
          targetType: "inline"
          script: |
            az account set --subscription $(subId)
            if [ $(az group exists --name $(ResourceGroupName) ) == false ]; then
                sleep 300
            fi
            az group create --name $(ResourceGroupName) --location $(Location)

      - task: Bash@3
        displayName: Az CLI Register Resource Providers for PR
        name: register_providers
        inputs:
          targetType: "inline"
          script: |
            az account set --subscription $(subId)
            az provider register -n 'Microsoft.Insights'

      - task: Bash@3
        displayName: Az CLI Deploy vWan Networking for PR
        name: create_vwan_network
        condition: and(or(ne(variables['gitVwanOUTPUT'], ''), ne(variables['gitVwanNwcOUTPUT'], '')), ne(variables['subId'], ''))
        inputs:
          targetType: "inline"
          script: |
            az deployment group create --resource-group $(ResourceGroupName) --template-file infra-as-code/bicep/modules/vwanConnectivity/vwanConnectivity.bicep --parameters @infra-as-code/bicep/modules/vwanConnectivity/parameters/vwanConnectivity.parameters.min.json parVirtualNetworkIdToLink="/subscriptions/$(subId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Network/virtualNetworks/vnet-spoke"

      - task: Bash@3
        displayName: Az CLI Deploy vWan Network connection for PR
        name: create_vwan_network_connection
        condition: and(ne(variables['gitVwanNwcOUTPUT'], ''), ne(variables['subId'], ''))
        inputs:
          targetType: "inline"
          script: |
            az deployment sub create --location $(Location) --template-file infra-as-code/bicep/modules/vnetPeeringVwan/vnetPeeringVwan.bicep --parameters @infra-as-code/bicep/modules/vnetPeeringVwan/parameters/vnetPeeringVwan.parameters.min.json parVirtualWanHubResourceId="/subscriptions/$(subId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Network/virtualHubs/alz-vhub-$(Location)" parRemoteVirtualNetworkResourceId="/subscriptions/$(subId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Network/virtualNetworks/vnet-spoke"

      # Used to clean environment from all resources provisioned from the 'bicep_deploy_prfiles' job within the 'PROverMainFileDeploy' stage.
      - job: bicep_cleanup
        dependsOn: bicep_deploy_prfiles
        variables:
          isDeployed: $[ dependencies.bicep_deploy_mainfiles.outputs['create_subscription.IsDeployed'] ]
        displayName: Cleanup Bicep Deployment
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: AzurePowerShell@5
            displayName: Az CLI Remove/Cleanup Deployment
            condition: ne(variables['isDeployed'], '')
            inputs:
              azureSubscription: "azserviceconnection"
              ScriptType: "FilePath"
              ScriptPath: ".github/scripts/Wipe-AlzTenant.ps1"
              ScriptArguments: '-tenantRootGroupID $(azclitenant) -intermediateRootGroupID "$(ManagementGroupPrefix)" -subscriptionName "$(SubscriptionName)"'
              azurePowerShellVersion: "LatestVersion"
              pwsh: true
