name: "ALZ-Bicep-ManagementResources-UnitTests"

trigger: none

variables:
  - group: csu-bicep-environment
  - name: ResourceGroupName
    value: "rsg-github-pr-$(System.PullRequest.PullRequestNumber)"
  - name: ManagementGroupPrefix
    value: "PR-$(System.PullRequest.PullRequestNumber)"
  - name: TopLevelManagementGroupDisplayName
    value: "PR $(System.PullRequest.PullRequestNumber) Azure Landing Zones"
  - name: SubscriptionName
    value: "oZakari"
    #value: "sub-unit-test-pr-$(System.PullRequest.PullRequestNumber)"

jobs:
  - job: bicep_deploy
    displayName: Deploy Bicep Files for PR
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: Bash@3
        displayName: Check for managementGroup Changes
        name: git_management_diff
        inputs:
          targetType: "inline"
          script: |
            git_diff1=$(git diff --name-only main HEAD infra-as-code/bicep/modules/managementGroups/managementGroups.bicep)
            git_diff2=$(git diff --name-only main HEAD infra-as-code/bicep/modules/customRoleDefinitions/customRoleDefinitions.bicep)
            git_diff3=$(git diff --name-only main HEAD infra-as-code/bicep/modules/policy/definitions/customPolicyDefinitions.bicep)
            git_diff4=$(git diff --name-only main HEAD infra-as-code/bicep/modules/policy/assignments/policyAssignmentManagementGroup.bicep)
            git_diff5=$(git diff --name-only main HEAD infra-as-code/bicep/modules/policy/assignments/alzDefaults/alzDefaultPolicyAssignments.bicep)
            git_diff6=$(git diff --name-only main HEAD infra-as-code/bicep/modules/roleAssignments/roleAssignmentManagementGroup.bicep)
            git_diff7=$(git diff --name-only main HEAD infra-as-code/bicep/modules/subscriptionPlacement/subscriptionPlacement.bicep)
            git_diff8=$(git diff --name-only main HEAD infra-as-code/bicep/orchestration/subPlacementAll/subPlacementAll.bicep)
            git_diff9=$(git diff --name-only main HEAD infra-as-code/bicep/modules/mgDiagSettings/mgDiagSettings.bicep)
            git_diff10=$(git diff --name-only main HEAD infra-as-code/bicep/orchestration/mgDiagSettingsAll/mgDiagSettingsAll.bicep)
            if [[ $git_diff1 != '' ]] || [[ $git_diff2 != '' ]] || [[ $git_diff3 != '' ]] || [[ $git_diff4 != '' ]] || [[ $git_diff5 != '' ]] || [[ $git_diff6 != '' ]] || [[ $git_diff7 != '' ]] || [[ $git_diff8 != '' ]] || [[ $git_diff9 != '' ]] || [[ $git_diff10 != '' ]]
              then echo "##vso[task.setvariable variable=gitManagementOutput]setmgmt"
            fi
            echo

      - task: Bash@3
        displayName: Login to Azure
        name: git_azlogin
        inputs:
          targetType: "inline"
          script: |
            az login --service-principal --username $(azclilogin) --password $(azclipwd) --tenant $(azclitenant)

      # - task: Bash@3
      #   displayName: Az CLI Create Subscription for PR
      #   name: create_subscription
      #   condition: or(ne(variables['gitManagementOUTPUT'], ''), ne(variables['gitLoggingOUTPUT'], ''), ne(variables['gitSpokeOUTPUT'], ''), ne(variables['gitHubOUTPUT'], ''), ne(variables['gitVwanOUTPUT'], ''), ne(variables['gitVwanNwcOUTPUT'], ''), ne(variables['gitVnetPeerOUTPUT'], ''))
      #   inputs:
      #     targetType: "inline"
      #     script: |
      #       subid=$(az deployment tenant create --name "deploy-$(SubscriptionName)" --location $(Location) --template-file infra-as-code/bicep/CRML/subscriptionAlias/subscriptionAlias.bicep --parameters @infra-as-code/bicep/CRML/subscriptionAlias/parameters/subscriptionAlias.parameters.min.json --parameters parSubscriptionBillingScope=$(ALZ-AZURE-SECRET-EA-BILLING-ACCOUNT) parSubscriptionName=$(SubscriptionName) | jq .properties.outputs.outSubscriptionId.value | tr -d '"')
      #       echo $subId
      #       echo "##vso[task.setvariable variable=subscriptionId]$subid"
      #       echo "##vso[task.setvariable variable=IsDeployed;isoutput=true]$subid"

      - task: Bash@3
        displayName: Az CLI Refresh subscription list
        name: refresh_subscription
        condition: and(or(ne(variables['gitManagementOUTPUT'], ''), ne(variables['gitLoggingOUTPUT'], ''), ne(variables['gitSpokeOUTPUT'], ''), ne(variables['gitHubOUTPUT'], ''), ne(variables['gitVwanOUTPUT'], ''), ne(variables['gitVwanNwcOUTPUT'], ''), ne(variables['gitVnetPeerOUTPUT'], '')), ne(variables['subscriptionId'], ''))
        inputs:
          targetType: "inline"
          script: |
            az account list --refresh

      - task: Bash@3
        displayName: Az CLI Create Resource Group for PR
        name: create_rsg
        condition: and(or(ne(variables['gitManagementOUTPUT'], ''), ne(variables['gitLoggingOUTPUT'], ''), ne(variables['gitSpokeOUTPUT'], ''), ne(variables['gitHubOUTPUT'], ''), ne(variables['gitVwanOUTPUT'], ''), ne(variables['gitVwanNwcOUTPUT'], ''), ne(variables['gitVnetPeerOUTPUT'], '')), ne(variables['subscriptionId'], ''))
        inputs:
          targetType: "inline"
          script: |
            az account set --subscription $(subscriptionId)
            if [ $(az group exists --name $(ResourceGroupName) ) == false ]; then
                sleep 300
            fi
            az group create --name $(ResourceGroupName) --location $(Location)

      - task: Bash@3
        displayName: Az CLI Register Resource Providers for PR
        name: register_providers
        inputs:
          targetType: "inline"
          script: |
            az account set --subscription $(subscriptionId)
            az provider register -n 'Microsoft.Insights'

      - task: Bash@3
        displayName: Az CLI Deploy Management Groups for PR
        name: create_mgs
        condition: and(or(ne(variables['gitManagementOUTPUT'], ''), ne(variables['gitLoggingOUTPUT'], ''), ne(variables['gitSpokeOUTPUT'], ''), ne(variables['gitHubOUTPUT'], ''), ne(variables['gitVwanOUTPUT'], ''), ne(variables['gitVwanNwcOUTPUT'], ''), ne(variables['gitVnetPeerOUTPUT'], '')), ne(variables['subscriptionId'], ''))
        inputs:
          targetType: "inline"
          script: |
            az deployment tenant create --template-file infra-as-code/bicep/modules/managementGroups/managementGroups.bicep --parameters @infra-as-code/bicep/modules/managementGroups/parameters/managementGroups.parameters.min.json parTopLevelManagementGroupPrefix=$(ManagementGroupPrefix) --location $(Location)

      - task: Bash@3
        displayName: Az CLI Deploy Custom Role Definitions for PR
        name: create_rbac_roles
        condition: and(ne(variables['gitManagementOUTPUT'], ''), ne(variables['subscriptionId'], ''))
        inputs:
          targetType: "inline"
          script: |
            az deployment mg create --template-file infra-as-code/bicep/modules/customRoleDefinitions/customRoleDefinitions.bicep  --parameters @infra-as-code/bicep/modules/customRoleDefinitions/parameters/customRoleDefinitions.parameters.min.json parAssignableScopeManagementGroupId=$(ManagementGroupPrefix) --location $(Location) --management-group-id $(ManagementGroupPrefix)

      - task: Bash@3
        displayName: Az CLI Deploy Custom Policy Definitions for PR
        name: create_policy_defs
        condition: and(ne(variables['gitManagementOUTPUT'], ''), ne(variables['subscriptionId'], ''))
        inputs:
          targetType: "inline"
          script: |
            az deployment mg create --template-file infra-as-code/bicep/modules/policy/definitions/customPolicyDefinitions.bicep  --parameters @infra-as-code/bicep/modules/policy/definitions/parameters/customPolicyDefinitions.parameters.min.json parTargetManagementGroupId=$(ManagementGroupPrefix) --location $(Location) --management-group-id $(ManagementGroupPrefix)

      # Verify that WhatIf does not find differences between code and environment thats just been deployed
      - task: Bash@3
        displayName: Az CLI After Deployment What-If Management Groups for PR
        name: whatif_mgs
        condition: and(or(ne(variables['gitManagementOUTPUT'], ''), ne(variables['gitLoggingOUTPUT'], ''), ne(variables['gitSpokeOUTPUT'], ''), ne(variables['gitHubOUTPUT'], ''), ne(variables['gitVwanOUTPUT'], ''), ne(variables['gitVwanNwcOUTPUT'], ''), ne(variables['gitVnetPeerOUTPUT'], '')), ne(variables['subscriptionId'], ''))
        inputs:
          targetType: "inline"
          script: |
            result=$(az deployment tenant what-if --template-file infra-as-code/bicep/modules/managementGroups/managementGroups.bicep --parameters @infra-as-code/bicep/modules/managementGroups/parameters/managementGroups.parameters.min.json parTopLevelManagementGroupPrefix=$(ManagementGroupPrefix) --location $(Location) --exclude-change-types Ignore NoChange --only-show-errors)
            if [[ $result != *'Resource changes: no change.'* ]]
            then
              echo "##vso[task.logissue type=error]WhatIf reports difference between code and environment thats just been deployed"
              echo "$result"
              exit 1
            fi

  # - job: bicep_cleanup
  #   dependsOn: bicep_deploy
  #   variables:
  #     isDeployed: $[ dependencies.bicep_deploy.outputs['create_subscription.IsDeployed'] ]
  #   displayName: Cleanup Bicep Deployment for PR
  #   pool:
  #     vmImage: ubuntu-latest
  #   steps:
  #     - task: AzurePowerShell@5
  #       displayName: Az CLI Remove/Cleanup Deployment
  #       condition: ne(variables['isDeployed'], '')
  #       inputs:
  #         azureSubscription: "azserviceconnection"
  #         ScriptType: "FilePath"
  #         ScriptPath: ".github/scripts/Wipe-AlzTenant.ps1"
  #         ScriptArguments: '-tenantRootGroupID $(azclitenant) -intermediateRootGroupID "$(ManagementGroupPrefix)" -subscriptionName "$(SubscriptionName)"'
  #         azurePowerShellVersion: "LatestVersion"
  #         pwsh: true
