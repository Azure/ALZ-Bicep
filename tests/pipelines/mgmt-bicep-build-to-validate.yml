# Description:This pipeline is used to allow contributors to quickly test changes made to MG structure, subscription moves, custom roles, custom policy definitions/sets, and policy assignments.
name: "ALZ-Bicep Management-RBAC-Policy-SubPlacement Module Tests"

trigger: none

variables:
  - group: csu-bicep-environment
  - name: ResourceGroupName
    value: "rsg-github-pr-$(System.PullRequest.PullRequestNumber)"

stages:
  # This stage will test the modules using the contributor's branch only.
  - stage: PRFileDeployOnly
    variables:
      - name: SubscriptionName
        value: "sub-unit-test-pr-$(System.PullRequest.PullRequestNumber)-s1"
      - name: ManagementGroupPrefix
        value: "PR-$(System.PullRequest.PullRequestNumber)-S1"

    # This job is used to create a subscription and test the modules and scenarios within the description at the top of this file.
    jobs:
      - job: bicep_deploy_prfiles
        displayName: Deploy Bicep Files for PR
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: Bash@3
            displayName: Login to Azure
            name: git_azlogin
            inputs:
              targetType: "inline"
              script: |
                az login --service-principal --username $(azclilogin) --password $(azclipwd) --tenant $(azclitenant)

          - task: Bash@3
            displayName: Az CLI Create Subscription
            name: create_subscription
            inputs:
              targetType: "inline"
              script: |
                az deployment mg create --name "deploy-$(SubscriptionName)" --location $(Location) --management-group-id $(azclitenant) --template-file tests/LZ-Vending/subscription/main.bicep --parameters @tests/LZ-Vending/subscription/subscription.parameters.json --parameters subscriptionBillingScope=$(ALZ-AZURE-SECRET-EA-BILLING-ACCOUNT) subscriptionDisplayName=$(SubscriptionName)
                subId=$(az deployment mg show --name "$(SubscriptionName)" --management-group-id $(azclitenant) --query properties.outputs.subscriptionId.value)
                echo $subId
                echo "##vso[task.setvariable variable=subscriptionId]$subId"
                echo "##vso[task.setvariable variable=IsDeployed;isoutput=true]$subId"

          - task: Bash@3
            displayName: Az CLI Refresh Subscription List
            name: refresh_subscription
            inputs:
              targetType: "inline"
              script: |
                az account list --refresh

          - task: Bash@3
            displayName: Az CLI Deploy Management Groups
            name: create_mgs
            inputs:
              targetType: "inline"
              script: |
                az deployment tenant create --template-file infra-as-code/bicep/modules/managementGroups/managementGroups.bicep --parameters @infra-as-code/bicep/modules/managementGroups/parameters/managementGroups.parameters.min.json parTopLevelManagementGroupPrefix=$(ManagementGroupPrefix) --location $(Location)

          - task: Bash@3
            displayName: Az CLI Deploy Custom Policy Definitions
            name: create_policy_defs
            inputs:
              targetType: "inline"
              script: |
                az deployment mg create --template-file infra-as-code/bicep/modules/policy/definitions/customPolicyDefinitions.bicep  --parameters @infra-as-code/bicep/modules/policy/definitions/parameters/customPolicyDefinitions.parameters.min.json parTargetManagementGroupId=$(ManagementGroupPrefix) --location $(Location) --management-group-id $(ManagementGroupPrefix)

          - task: Bash@3
            displayName: Az CLI Deploy Custom Role Definitions
            name: create_rbac_roles
            inputs:
              targetType: "inline"
              script: |
                az deployment mg create --name "deploy-customroledefs-$(Build.BuildId)" --template-file infra-as-code/bicep/modules/customRoleDefinitions/customRoleDefinitions.bicep --parameters @infra-as-code/bicep/modules/customRoleDefinitions/parameters/customRoleDefinitions.parameters.min.json parAssignableScopeManagementGroupId=$(ManagementGroupPrefix) --location $(Location) --management-group-id $(ManagementGroupPrefix)
                appOwnertRoleId = $(az deployment mg show --name "deploy-customroledefs-$(Build.BuildId)" --management-group-id $(azclitenant) --query properties.outputs.outRolesApplicationOwnerRoleId.value)
                echo "##vso[task.setvariable variable=appOwnerRoleId]$appOwnertRoleId"

          - task: Bash@3
            displayName: Az CLI Deploy Custom Role Assignments
            name: assign_rbac_roles
            inputs:
              targetType: "inline"
              script: |
                spnObjectId = $(Get-AzADServicePrincipal -DisplayName spn-lz-sub-vending.Id)
                echo "az deployment mg create --template-file infra-as-code/bicep/modules/roleAssignments/roleAssignmentManagementGroup.bicep  --parameters @infra-as-code/bicep/modules/roleAssignments/parameters/roleAssignmentManagementGroup.servicePrincipal.parameters.min.json parAssigneeObjectId=$spnObjectId parRoleDefinitionId=$(appOwnerRoleId) --location $(Location) --management-group-id $(ManagementGroupPrefix)"

          - task: Bash@3
            displayName: Az CLI Subscription Placement
            name: move_sub
            inputs:
              targetType: "inline"
              script: |
                az deployment mg create --template-file infra-as-code/bicep/orchestration/subPlacementAll/subPlacementAll.bicep --parameters @infra-as-code/bicep/orchestration/subPlacementAll/parameters/subPlacementAll.parameters.min.json parTopLevelManagementGroupPrefix="$(ManagementGroupPrefix)" parPlatformConnectivityMgSubs='[$(subscriptionId)]' --location $(Location) --management-group-id $(ManagementGroupPrefix)

          - task: Bash@3
            displayName: Az CLI Deploy Default Policy Assignments
            name: assign_default_policies
            inputs:
              targetType: "inline"
              script: |
                az deployment mg create --template-file infra-as-code/bicep/modules/policy/assignments/policyAssignmentManagementGroup.bicep  --parameters @infra-as-code/bicep/modules/policy/assignments/parameters/policyAssignmentManagementGroup.deny.parameters.min.json parPolicyAssignmentDefinitionId="/providers/Microsoft.Management/managementGroups/$(ManagementGroupPrefix)/providers/Microsoft.Authorization/policyDefinitions/Deny-PublicIP" --location $(Location) --management-group-id $(ManagementGroupPrefix)

          # Used to verify that WhatIf operator does not find differences between code and environment that's just been deployed.
          - task: Bash@3
            displayName: Az CLI After Deployment What-If Management Groups
            name: whatif_mgs
            inputs:
              targetType: "inline"
              script: |
                result=$(az deployment tenant what-if --template-file infra-as-code/bicep/modules/managementGroups/managementGroups.bicep --parameters @infra-as-code/bicep/modules/managementGroups/parameters/managementGroups.parameters.min.json parTopLevelManagementGroupPrefix=$(ManagementGroupPrefix) --location $(Location) --exclude-change-types Ignore NoChange --only-show-errors)
                if [[ $result != *'Resource changes: no change.'* ]]
                then
                  echo "##vso[task.logissue type=error]WhatIf reports difference between code and environment thats just been deployed"
                  echo "$result"
                  exit 1
                fi

      # Used to clean environment from all resources provisioned from the 'bicep_deploy_prfiles' job within the 'PRFileDeployOnly' stage.
      - job: bicep_cleanup
        dependsOn: bicep_deploy_prfiles
        variables:
          isDeployed: $[ dependencies.bicep_deploy_prfiles.outputs['create_subscription.IsDeployed'] ]
        displayName: Cleanup Bicep Deployment
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: AzurePowerShell@5
            displayName: Az CLI Remove/Cleanup Deployment
            condition: ne(variables['isDeployed'], '')
            inputs:
              azureSubscription: "azserviceconnection"
              ScriptType: "FilePath"
              ScriptPath: ".github/scripts/Wipe-AlzTenant.ps1"
              ScriptArguments: '-tenantRootGroupID $(azclitenant) -intermediateRootGroupID "$(ManagementGroupPrefix)" -subscriptionName "$(SubscriptionName)"'
              azurePowerShellVersion: "LatestVersion"
              pwsh: true

  # This stage will test the modules by first deploying the resources using the ALZ-Bicep main branch and then deploying over the top of those resources using the contributor's branch.
  - stage: PROverMainFileDeploy
    dependsOn: "PRFileDeployOnly"
    variables:
      - name: SubscriptionName
        value: "sub-unit-test-pr-$(System.PullRequest.PullRequestNumber)-s2"
      - name: ManagementGroupPrefix
        value: "PR-$(System.PullRequest.PullRequestNumber)-S2"

    # This job is used to create a subscription and test the modules and scenarios within the description at the top of this file.
    jobs:
      - job: bicep_deploy_mainfiles
        displayName: Deploy Bicep Files for Main
        pool:
          vmImage: ubuntu-latest
        steps:
          - bash: git checkout main

          - task: Bash@3
            displayName: Login to Azure
            name: git_azlogin
            inputs:
              targetType: "inline"
              script: |
                az login --service-principal --username $(azclilogin) --password $(azclipwd) --tenant $(azclitenant)

          - task: Bash@3
            displayName: Az CLI Create Subscription
            name: create_subscription
            inputs:
              targetType: "inline"
              script: |
                az deployment mg create --name "deploy-$(SubscriptionName)" --location $(Location) --management-group-id $(azclitenant) --template-file tests/LZ-Vending/subscription/main.bicep --parameters @tests/LZ-Vending/subscription/subscription.parameters.json --parameters subscriptionBillingScope=$(ALZ-AZURE-SECRET-EA-BILLING-ACCOUNT) subscriptionDisplayName=$(SubscriptionName)
                subId=$(az deployment mg show --name "$(SubscriptionName)" --management-group-id $(azclitenant) --query properties.outputs.subscriptionId.value)
                echo $subId
                echo "##vso[task.setvariable variable=subscriptionId]$subid"
                echo "##vso[task.setvariable variable=subscriptionId;isoutput=true]$subId"
                echo "##vso[task.setvariable variable=IsDeployed;isoutput=true]$subId"

          - task: Bash@3
            displayName: Az CLI Refresh Subscription List
            name: refresh_subscription
            inputs:
              targetType: "inline"
              script: |
                az account list --refresh

          - task: Bash@3
            displayName: Az CLI Deploy Management Groups
            name: create_mgs
            inputs:
              targetType: "inline"
              script: |
                az deployment tenant create --template-file infra-as-code/bicep/modules/managementGroups/managementGroups.bicep --parameters @infra-as-code/bicep/modules/managementGroups/parameters/managementGroups.parameters.min.json parTopLevelManagementGroupPrefix=$(ManagementGroupPrefix) --location $(Location)

          - task: Bash@3
            displayName: Az CLI Deploy Custom Policy Definitions
            name: create_policy_defs
            inputs:
              targetType: "inline"
              script: |
                az deployment mg create --template-file infra-as-code/bicep/modules/policy/definitions/customPolicyDefinitions.bicep  --parameters @infra-as-code/bicep/modules/policy/definitions/parameters/customPolicyDefinitions.parameters.min.json parTargetManagementGroupId=$(ManagementGroupPrefix) --location $(Location) --management-group-id $(ManagementGroupPrefix)

          - task: Bash@3
            displayName: Az CLI Deploy Custom Role Definitions
            name: create_rbac_roles
            inputs:
              targetType: "inline"
              script: |
                az deployment mg create --name "deploy-customroledefs-$(Build.BuildId)" --template-file infra-as-code/bicep/modules/customRoleDefinitions/customRoleDefinitions.bicep --parameters @infra-as-code/bicep/modules/customRoleDefinitions/parameters/customRoleDefinitions.parameters.min.json parAssignableScopeManagementGroupId=$(ManagementGroupPrefix) --location $(Location) --management-group-id $(ManagementGroupPrefix)
                appOwnertRoleId = $(az deployment mg show --name "deploy-customroledefs-$(Build.BuildId)" --management-group-id $(azclitenant) --query properties.outputs.outRolesApplicationOwnerRoleId.value)
                echo "##vso[task.setvariable variable=appOwnerRoleId]$appOwnertRoleId"

          - task: Bash@3
            displayName: Az CLI Deploy Custom Role Assignments
            name: assign_rbac_roles
            inputs:
              targetType: "inline"
              script: |
                spnObjectId = $(Get-AzADServicePrincipal -DisplayName spn-lz-sub-vending.Id)
                echo "az deployment mg create --template-file infra-as-code/bicep/modules/roleAssignments/roleAssignmentManagementGroup.bicep  --parameters @infra-as-code/bicep/modules/roleAssignments/parameters/roleAssignmentManagementGroup.servicePrincipal.parameters.min.json parAssigneeObjectId=$spnObjectId parRoleDefinitionId=$(appOwnerRoleId) --location $(Location) --management-group-id $(ManagementGroupPrefix)"

          - task: Bash@3
            displayName: Az CLI Subscription Placement
            name: move_sub
            inputs:
              targetType: "inline"
              script: |
                az deployment mg create --template-file infra-as-code/bicep/orchestration/subPlacementAll/subPlacementAll.bicep --parameters @infra-as-code/bicep/orchestration/subPlacementAll/parameters/subPlacementAll.parameters.min.json parTopLevelManagementGroupPrefix="$(ManagementGroupPrefix)" parPlatformConnectivityMgSubs='[$(subscriptionId)]' --location $(Location) --management-group-id $(ManagementGroupPrefix)

          - task: Bash@3
            displayName: Az CLI Deploy Default Policy Assignments
            name: assign_default_policies
            inputs:
              targetType: "inline"
              script: |
                az deployment mg create --template-file infra-as-code/bicep/modules/policy/assignments/policyAssignmentManagementGroup.bicep  --parameters @infra-as-code/bicep/modules/policy/assignments/parameters/policyAssignmentManagementGroup.deny.parameters.min.json parPolicyAssignmentDefinitionId="/providers/Microsoft.Management/managementGroups/$(ManagementGroupPrefix)/providers/Microsoft.Authorization/policyDefinitions/Deny-PublicIP" --location $(Location) --management-group-id $(ManagementGroupPrefix)

          # Used to verify that WhatIf operator does not find differences between code and environment that's just been deployed.
          - task: Bash@3
            displayName: Az CLI After Deployment What-If Management Groups
            name: whatif_mgs
            inputs:
              targetType: "inline"
              script: |
                result=$(az deployment tenant what-if --template-file infra-as-code/bicep/modules/managementGroups/managementGroups.bicep --parameters @infra-as-code/bicep/modules/managementGroups/parameters/managementGroups.parameters.min.json parTopLevelManagementGroupPrefix=$(ManagementGroupPrefix) --location $(Location) --exclude-change-types Ignore NoChange --only-show-errors)
                if [[ $result != *'Resource changes: no change.'* ]]
                then
                  echo "##vso[task.logissue type=error]WhatIf reports difference between code and environment thats just been deployed"
                  echo "$result"
                  exit 1
                fi

      - job: bicep_deploy_prfiles
        displayName: Deploy Bicep Files for PR
        dependsOn: bicep_deploy_mainfiles
        variables:
          subscriptionId: $[ dependencies.bicep_deploy_mainfiles.outputs['passOutput.subscriptionId'] ]
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: Bash@3
            displayName: Login to Azure
            name: git_azlogin
            inputs:
              targetType: "inline"
              script: |
                az login --service-principal --username $(azclilogin) --password $(azclipwd) --tenant $(azclitenant)

          - task: Bash@3
            displayName: Az CLI Refresh Subscription List
            name: refresh_subscription
            inputs:
              targetType: "inline"
              script: |
                az account list --refresh

          - task: Bash@3
            displayName: Az CLI Deploy Management Groups
            name: create_mgs
            inputs:
              targetType: "inline"
              script: |
                az deployment tenant create --template-file infra-as-code/bicep/modules/managementGroups/managementGroups.bicep --parameters @infra-as-code/bicep/modules/managementGroups/parameters/managementGroups.parameters.min.json parTopLevelManagementGroupPrefix=$(ManagementGroupPrefix) --location $(Location)

          - task: Bash@3
            displayName: Az CLI Deploy Custom Policy Definitions
            name: create_policy_defs
            inputs:
              targetType: "inline"
              script: |
                az deployment mg create --template-file infra-as-code/bicep/modules/policy/definitions/customPolicyDefinitions.bicep  --parameters @infra-as-code/bicep/modules/policy/definitions/parameters/customPolicyDefinitions.parameters.min.json parTargetManagementGroupId=$(ManagementGroupPrefix) --location $(Location) --management-group-id $(ManagementGroupPrefix)

          - task: Bash@3
            displayName: Az CLI Deploy Custom Role Definitions
            name: create_rbac_roles
            inputs:
              targetType: "inline"
              script: |
                az deployment mg create --name "deploy-customroledefs-$(Build.BuildId)" --template-file infra-as-code/bicep/modules/customRoleDefinitions/customRoleDefinitions.bicep --parameters @infra-as-code/bicep/modules/customRoleDefinitions/parameters/customRoleDefinitions.parameters.min.json parAssignableScopeManagementGroupId=$(ManagementGroupPrefix) --location $(Location) --management-group-id $(ManagementGroupPrefix)
                appOwnertRoleId = $(az deployment mg show --name "deploy-customroledefs-$(Build.BuildId)" --management-group-id $(azclitenant) --query properties.outputs.outRolesApplicationOwnerRoleId.value)
                echo "##vso[task.setvariable variable=appOwnerRoleId]$appOwnertRoleId"

          - task: Bash@3
            displayName: Az CLI Deploy Custom Role Assignments
            name: assign_rbac_roles
            inputs:
              targetType: "inline"
              script: |
                spnObjectId = $(Get-AzADServicePrincipal -DisplayName spn-lz-sub-vending.Id)
                echo "az deployment mg create --template-file infra-as-code/bicep/modules/roleAssignments/roleAssignmentManagementGroup.bicep  --parameters @infra-as-code/bicep/modules/roleAssignments/parameters/roleAssignmentManagementGroup.servicePrincipal.parameters.min.json parAssigneeObjectId=$spnObjectId parRoleDefinitionId=$(appOwnerRoleId) --location $(Location) --management-group-id $(ManagementGroupPrefix)"

          - task: Bash@3
            displayName: Az CLI Subscription Placement
            name: move_sub
            inputs:
              targetType: "inline"
              script: |
                az deployment mg create --template-file infra-as-code/bicep/orchestration/subPlacementAll/subPlacementAll.bicep --parameters @infra-as-code/bicep/orchestration/subPlacementAll/parameters/subPlacementAll.parameters.min.json parTopLevelManagementGroupPrefix="$(ManagementGroupPrefix)" parPlatformConnectivityMgSubs='[$(subscriptionId)]' --location $(Location) --management-group-id $(ManagementGroupPrefix)

          - task: Bash@3
            displayName: Az CLI Deploy Default Policy Assignments
            name: assign_default_policies
            inputs:
              targetType: "inline"
              script: |
                az deployment mg create --template-file infra-as-code/bicep/modules/policy/assignments/policyAssignmentManagementGroup.bicep  --parameters @infra-as-code/bicep/modules/policy/assignments/parameters/policyAssignmentManagementGroup.deny.parameters.min.json parPolicyAssignmentDefinitionId="/providers/Microsoft.Management/managementGroups/$(ManagementGroupPrefix)/providers/Microsoft.Authorization/policyDefinitions/Deny-PublicIP" --location $(Location) --management-group-id $(ManagementGroupPrefix)

          # Used to verify that WhatIf operator does not find differences between code and environment that's just been deployed.
          - task: Bash@3
            displayName: Az CLI After Deployment What-If Management Groups
            name: whatif_mgs
            inputs:
              targetType: "inline"
              script: |
                result=$(az deployment tenant what-if --template-file infra-as-code/bicep/modules/managementGroups/managementGroups.bicep --parameters @infra-as-code/bicep/modules/managementGroups/parameters/managementGroups.parameters.min.json parTopLevelManagementGroupPrefix=$(ManagementGroupPrefix) --location $(Location) --exclude-change-types Ignore NoChange --only-show-errors)
                if [[ $result != *'Resource changes: no change.'* ]]
                then
                  echo "##vso[task.logissue type=error]WhatIf reports difference between code and environment thats just been deployed"
                  echo "$result"
                  exit 1
                fi

      # Used to clean environment from all resources provisioned from the 'bicep_deploy_prfiles' job within the 'PROverMainFileDeploy' stage.
      - job: bicep_cleanup
        dependsOn: bicep_deploy_prfiles
        variables:
          isDeployed: $[ dependencies.bicep_deploy_mainfiles.outputs['create_subscription.IsDeployed'] ]
        displayName: Cleanup Bicep Deployment
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: AzurePowerShell@5
            displayName: Az CLI Remove/Cleanup Deployment
            condition: ne(variables['isDeployed'], '')
            inputs:
              azureSubscription: "azserviceconnection"
              ScriptType: "FilePath"
              ScriptPath: ".github/scripts/Wipe-AlzTenant.ps1"
              ScriptArguments: '-tenantRootGroupID $(azclitenant) -intermediateRootGroupID "$(ManagementGroupPrefix)" -subscriptionName "$(SubscriptionName)"'
              azurePowerShellVersion: "LatestVersion"
              pwsh: true
